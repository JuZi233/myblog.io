{"pages":[{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"Hello d3j","text":"Welcome to d3j! This is your very first post. Check documentation for more info. If you get any problems when using fibos, you can find the answer in troubleshooting Quick Start安装FIBOS 支持常用的 UNIX 操作系统，比如 Mac OSX，Linux 和 FreeBSD。 建议在终端直接使用下面的命令快速安装：稳定版 1$ curl -s https://fibos.io/download/installer.sh | sh 安装结束后 FIBOS 可执行文件在系统 bin 目录下，使用查看 FIBOS 版本 12345~$ which fibos/usr/local/bin/fibos~$ fibos --versionv0.27.0-dev 常用命令直接执行 FIBOS 回车，查询版本信息，如： 123456~$ fibosWelcome to fibjs 0.26.0-dev.Type '.help' for more information.&gt; console.log('hello,FIBOS!')hello,FIBOS!&gt; .info 创建 hello_fibos 文件夹 ，生成 package.json 文件配置初始化： 12$ cd hello_fibos$ fibos --init 或者 npm init 安装包 1$ fibos --install fibos.js 或者 npm install fibos.js 升级重新执行安装命令会自动覆盖原有的 fibos 可执行文件，然后重启一下 fibos 服务即可完成升级。 卸载直接删除 /usr/local/bin/ 下的 fibos 这个可执行文件即可。 1$ sudo rm /usr/local/bin/fibos","link":"/2019/10/29/Hello-fibjs/"},{"title":"SystemContract","text":"newaccount 创建合约账户 参数 name type description creator string 创建者的账户名 name string 被创建者的账户名 owner string 被创建者账户 owner 权限公钥 active string 被创建者 active 权限公钥 示例1234567891011121314151617181920const FIBOS = require('fibos.js');const fibos_client = FIBOS({ // fibos 测试网 chainId chainId: '68cee14f598d88d340b50940b6ddfba28c444b46cd5f33201ace82c78896793a', keyProvider: 'PRIVATE_KEY', // 你的私钥 httpEndpoint: 'http://api.testnet.fo',});let ctx = fibos_client.contractSync('eosio');var r = ctx.newaccountSync({ creator:'eosio', name:'NEW_ACCOUNT_NAME', owner:'PUBLIC_KEY_FOR_OWNER_PERMISSION', active:'PUBLIC_KEY_FOR_ACTIVE_PERMISSION'},{ authorization: 'ACCOUNT_FOR_PRIVATE_KEY' // 私钥对应的账号});console.log(r); buyrambytes 创建者调用该方法为被创建者购买内存来存放新账户的信息 参数 name type description payer string 创建者的账户名 receiver string 被创建者的账户名 bytes uint32 购买的内存大小（字节） 示例12345678910111213141516171819const FIBOS = require('fibos.js');const fibos_client = FIBOS({ // fibos 测试网 chainId chainId: '68cee14f598d88d340b50940b6ddfba28c444b46cd5f33201ace82c78896793a', keyProvider: 'PRIVATE_KEY', // 你的私钥 httpEndpoint: 'http://api.testnet.fo',});let ctx = fibos_client.contractSync('eosio');var r = ctx.buyrambytesSync({ payer: 'ACCOUNT_OF_PAYER', receiver: 'ACCOUNT_OF_RECEIVER', bytes: 4096},{ authorization: 'ACCOUNT_FOR_PRIVATE_KEY' // 私钥对应的账号});console.log(r); delegatebw 抵押通证获取 cpu 和带宽资源 参数 name type description from string 资源抵押者的账户名 receiver string 资源接受者的账户名 stake_net_quantity string 抵押者为接受者抵押 FO 获取 NET stake_cpu_quantity string 抵押者为接受者抵押 FO 获取 CPU transfer bool 代表抵押资源同时是否将对应通证转账给接受者 示例123456789101112131415161718192021const FIBOS = require('fibos.js');const fibos_client = FIBOS({ // fibos 测试网 chainId chainId: '68cee14f598d88d340b50940b6ddfba28c444b46cd5f33201ace82c78896793a', keyProvider: 'PRIVATE_KEY', // 你的私钥 httpEndpoint: 'http://api.testnet.fo',});let ctx = fibos_client.contractSync('eosio');var r = ctx.delegatebwSync({ from: 'ACCOUNT_OF_MORTGAGOR', receiver: 'ACCOUNT_OF_RECEIVER', stake_net_quantity: '3193.0000 FO', stake_cpu_quantity: '30000.0000 FO', transfer: 0},{ authorization: 'ACCOUNT_FOR_PRIVATE_KEY' // 私钥对应的账号});console.log(r); claimrewards 区块生产者领取工资 参数 name type description owner string 区块生产者名称 示例1234567891011121314151617const FIBOS = require('fibos.js');const fibos_client = FIBOS({ // fibos 测试网 chainId chainId: '68cee14f598d88d340b50940b6ddfba28c444b46cd5f33201ace82c78896793a', keyProvider: 'PRIVATE_KEY', // 你的私钥 httpEndpoint: 'http://api.testnet.fo',});let ctx = fibos_client.contractSync('eosio');var r = ctx.claimrewardsSync({ owner: 'ACCOUNT_OR_OWNER'},{ authorization: 'ACCOUNT_FOR_PRIVATE_KEY' // 私钥对应的账号});console.log(r);","link":"/2019/10/29/fibos-SystemContract/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post 1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/10/28/hello-world/"},{"title":"SystemPermisson","text":"什么是权限FIBOS 账户权限有2种： owner、active，一个账户必须“关联” owner、active 权限。 owner 拥有超级权限，代表着账户的归属者，因为拥有此权限者可以用于操作其他权限配置，该权限常用事务中（转账、合约 action 等）一般不会使用。 active 常用业务的权限，比如：转账、投票等。 账户与权限的关系一个完整的账户包含如下属性： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758{ 'account_name': 'hellofibos01', 'head_block_num': 10, 'head_block_time': '2018-08-21T09:58:50.500', 'privileged': false, 'last_code_update': '1970-01-01T00:00:00.000', 'created': '2018-08-21T09:58:51.000', 'ram_quota': -1, 'net_weight': -1, 'cpu_weight': -1, 'net_limit': { 'used': -1, 'available': -1, 'max': -1 }, 'cpu_limit': { 'used': -1, 'available': -1, 'max': -1 }, 'ram_usage': 2724, 'permissions': [ { 'perm_name': 'active', 'parent': 'owner', 'required_auth': { 'threshold': 1, 'keys': [ { 'key': 'FO5dZut9MG9ZdqrT1WYdPkp1Txxi6JLRYEgYCtAUDWH6ymNqdJpR', 'weight': 1 } ], 'accounts': [], 'waits': [] } }, { 'perm_name': 'owner', 'parent': '', 'required_auth': { 'threshold': 1, 'keys': [ { 'key': 'FO5dZut9MG9ZdqrT1WYdPkp1Txxi6JLRYEgYCtAUDWH6ymNqdJpR', 'weight': 1 } ], 'accounts': [], 'waits': [] } } ], 'total_resources': null, 'self_delegated_bandwidth': null, 'refund_request': null, 'voter_info': null} 结果中 permissions 字段 owner、active 权限控制者确实是公钥FO5dZut9MG9ZdqrT1WYdPkp1Txxi6JLRYEgYCtAUDWH6ymNqdJpR 的拥有者。 分析账户与权限在新建账户的时候设置owner和active的权限对应的的公私钥值： 123456fibos.newaccountSync({ creator: 'eosio', name: name, owner: pubkey, active: pubkey}); * 以上代码可以看到把 owner、active 权限的控制权限给了公钥 FO5dZut9MG9ZdqrT1WYdPkp1Txxi6JLRYEgYCtAUDWH6ymNqdJpR，也就说此公钥对应的私钥拥有者，有 owner、active 的权限。 * 配置权限更改账户 hellofibos01 的 active 权限。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859var FIBOS = require('fibos.js');//账户 hellofibos01 的公私钥对let pubkey = 'your public key';let prikey = 'your private key';//账户 hellofibos02 的公私钥对let pubkey2 = 'your public key2';let prikey2 = 'your private key2';var name = 'hellofibos01';var name2 = 'hellofibos02';//创建 hellofibos02 账户var fibos = FIBOS({ chainId: 'cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f', keyProvider: 'your keyProvider', httpEndpoint: 'http://127.0.0.1:8888', logger: { log: null, error: null }});fibos.newaccountSync({ creator: 'eosio', name: name2, owner: pubkey2, active: pubkey2});//修改hellofibos01 的active权限,客户端 需要更改为 hellofibos01 的私钥fibos = FIBOS({ chainId: 'cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f', keyProvider: 'your private key', httpEndpoint: 'http://127.0.0.1:8888', logger: { log: null, error: null }});let ctx = fibos.contractSync('eosio');ctx.updateauthSync({ account: name, permission: 'active', parent: 'owner', auth: { threshold: 1, keys: [{ key: 'FO5UFAzxUsbjQCijL5LtS6TaTtkJgPJACZ8qwDpXyLaW3sE9Ed2D', weight: 1 }] }});var c = fibos.getAccountSync(name);console.notice(c); 输出结果如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758{ 'account_name': 'hellofibos01', 'head_block_num': 66, 'head_block_time': '2018-08-21T09:59:18.500', 'privileged': false, 'last_code_update': '1970-01-01T00:00:00.000', 'created': '2018-08-21T09:58:51.000', 'ram_quota': -1, 'net_weight': -1, 'cpu_weight': -1, 'net_limit': { 'used': -1, 'available': -1, 'max': -1 }, 'cpu_limit': { 'used': -1, 'available': -1, 'max': -1 }, 'ram_usage': 2724, 'permissions': [ { 'perm_name': 'active', 'parent': 'owner', 'required_auth': { 'threshold': 1, 'keys': [ { 'key': 'FO5UFAzxUsbjQCijL5LtS6TaTtkJgPJACZ8qwDpXyLaW3sE9Ed2D', 'weight': 1 } ], 'accounts': [], 'waits': [] } }, { 'perm_name': 'owner', 'parent': '', 'required_auth': { 'threshold': 1, 'keys': [ { 'key': 'FO5dZut9MG9ZdqrT1WYdPkp1Txxi6JLRYEgYCtAUDWH6ymNqdJpR', 'weight': 1 } ], 'accounts': [], 'waits': [] } } ], 'total_resources': null, 'self_delegated_bandwidth': null, 'refund_request': null, 'voter_info': null} 以上代码新建了账户 hellofibos02，并且调用 updateauthSync 方法，进行权限变更操作。我们把 hellofibos01 的 active 权限转移给了公钥 FO5UFAzxUsbjQCijL5LtS6TaTtkJgPJACZ8qwDpXyLaW3sE9Ed2D。 多签签名,多签及阀值我们在使用区块链进行授权操作时, 都是通过私钥进行签名的，通过确认签名来确认授权许可，多签则是将一个权限分给多个账户，设置一个阀值，每个参与的账户都有权重，当最后的权重大于等于该阀值的时候，授权通过 实例单签 权限 所属公钥 权重 阀值 owner 1 FO5dZut9MG9ZdqrT1WYdPkp1Txxi6JLRYEgYCtAUDWH6ymNqdJpR 1 - active 1 FO5dZut9MG9ZdqrT1WYdPkp1Txxi6JLRYEgYCtAUDWH6ymNqdJpR 1 - 如表所示，如果要获得 owner 权限授权，拥有者的权重必须大于等于 owner 所对应的阈值，上面的示例 owner 的阈值是1，而所属公钥 FO6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV 的权重是1，所以这个所属公钥就可以直接获取 owner 进行操作。 多签 权限 所属公钥 权重 阀值 owner 2 FO5dZut9MG9ZdqrT1WYdPkp1Txxi6JLRYEgYCtAUDWH6ymNqdJpR 1 - FO5UFAzxUsbjQCijL5LtS6TaTtkJgPJACZ8qwDpXyLaW3sE9Ed2D 1 - active 1 FO5dZut9MG9ZdqrT1WYdPkp1Txxi6JLRYEgYCtAUDWH6ymNqdJpR 1 - 如表所示，要想获得 owner 权限，必须2个所属公钥同时授权才可以获得。","link":"/2019/10/31/SystemPermisson/"}],"tags":[{"name":"-hello","slug":"hello","link":"/tags/hello/"},{"name":"d3j","slug":"d3j","link":"/tags/d3j/"}],"categories":[{"name":"fibos","slug":"fibos","link":"/categories/fibos/"}]}